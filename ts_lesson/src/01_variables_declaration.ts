import { repeatComment } from "./utils/utils";
repeatComment("Hello TypeScript !!!");

/*  üì£ ======== 1. Variable declaration ======== */

/*  types 
string, boolean, number, array, enum, union, any, void, never
*/

//---- Types inference - —è–∫—â–æ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–º–æ —è–≤–Ω–æ —Ç–∏–ø - –π–æ–≥–æ –≤–∏–≤–æ–¥–∏—Ç—å TS
let myStr = "this is string";

// @ts-expect-error
myStr = 10; // Error

// –¢—É—Ç —Ç–∞–∫–æ–∂ –ø—Ä–∞—Ü—é—î inference - —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω–µ string
function getStr() {
  return "Hello ";
}

let newStr = getStr();

function getNum() {
  return 10;
}

// newStr = getNum(); // Error

//---- Types declaration
let greet: string = "Hello TS";

greet = "Another string"; // OK

// greet = 12 // Errror

/* –Ø–∫–∏–π —Ç–∏–ø –±—É–¥–µ  —É –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ myConst ?
 –¶–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è  "string literal type" - –∑–Ω–∞—á–µ–Ω—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è
 */
const myConst = "I am string";

/* –ê–ª–µ —Ü–µ –Ω–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ñ–≤, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö —î –æ–±'—î–∫—Ç–æ–º.
   –ß–æ–º—É? –¢–æ–º—É —â–æ object —î mutable —Å—É—Ç–Ω—ñ—Å—Ç—é 
 */
const myObj = {
  firstName: "Bill",
};

/* –ê —è–∫–∏–π —Ç–∏–ø –±—É–¥–µ —É –∑–º—ñ–Ω–Ω–æ—ó —è–∫—â–æ —ó–π –Ω–µ –Ω–∞–¥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è  ? */
/*  –¢–∏–ø any —Ü–µ –∑–ª–æ. –í—ñ–Ω –∑–∞ —Ñ–∞–∫—Ç–æ–º –≤—ñ–¥–∫–ª—é—á–∞—î –≤—Å—ñ –ø–æ–¥–∞–ª—å—à—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏   */
let badType;
badType = 42;
badType = "this string"; // –¶–µ –¥—É–∂–µ –ø–æ–≥–∞–Ω–æ !!! –ê–¥–∂–µ —Ç–∏–ø z-any

/*  üì£ ======== 2. Function type  ======== */

// @ts-expect-error
function add(a: number, b: number): number {}

add(3, add(3, 4));
add(3, add(3, 4));
add(3, add(3, 4));
add(3, add(3, 4));
add(3, add(3, 4));
add(3, add(3, 4));

/*  ======================= üë©‚Äçüéì –ó–ê–í–î–ê–ù–ù–Ø –°–õ–£–•–ê–ß–ê–ú 
1. tasks/01_task.ts
2. tasks/02_task.ts
3. tasks/03_task.ts
*/

/*  üì£ ======== 3. Object type ======== */

function printWatch(watch: { make: string; year: number }) {
  console.log(`${watch.make} ${watch.year}`);
}
//üî∫‚ùóÔ∏è Uncomment
// printWatch({ make: "Constantin Vacheron", year: 2023 });

/* ======================= üë©‚Äçüéì –ó–ê–í–î–ê–ù–ù–Ø –°–õ–£–•–ê–ß–ê–ú:
  5 => tasks/05_task.ts
  6 => tasks/06_task.ts 
*/

/*  üì£ ======== 4. Arrays ======== */
/* –ê —è–∫–∏–π —Ç–∏–ø –±—É–¥–µ —É –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –º–∞—Å–∏–≤—É?   any !!!! */
let arr = [];
// @ts-expect-error
arr.push(33);
// @ts-expect-error
arr.push("string"); // —Ç–µ–∂ –º–æ–∂–Ω–∞ - –∞–¥–∂–µ —Ç–∏–ø any, —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ –≤–∏–º–∫–Ω–µ–Ω–∞

/*  –¢–∞–∫ –±—É–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ  */
let myArr: number[] = [];
myArr.push(33);
// myArr.push("string") // Error

/* –©–µ –æ–¥–∏–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–µ–∫–ª–∞—Ä—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É array  */
let strArr: Array<string> = ["more", "strings", "here"];

/*  üì£ ======== 5. Tuple ======== */
/* —Ü–µ –ø–æ —Å—É—Ç—ñ –º–∞—Å–∏–≤ –∑ –æ–±–º–µ–∂–µ–Ω–∏–º length  */
let myTuple: [number, string, boolean] = [34, "Hello", false];

//@ts-expect-error
myTuple = [1, 2, 3]; // Error

// –ù–æ push –∫—Ä–∞—â–µ –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –∑ tuple
myTuple.push(1, 2, 3, 4); // OK -> 1,2,3,4 –¥–æ–¥–∞–¥—É—Ç—å—Å—è –≤ tuple

//üî∫‚ùóÔ∏è Uncomment
// console.log(myTuple);

/* ======================= üë©‚Äçüéì –ó–ê–í–î–ê–ù–ù–Ø –°–õ–£–•–ê–ß–ê–ú:
  7 => tasks/07_task.ts 
  8 => tasks/08_task.ts 
  9 => tasks/09_task.ts 
*/

/*  üì£ ======== 6. Custom type ======== */

/* Interfaces - —Ü–µ  –∫–æ–ª–µ–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω—å –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π —Ç–∞ –º–µ—Ç–æ–¥—ñ–≤
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏–Ω—Ü–∏–ø  DuckType
    When I see a bird that walks like a duck
    and swims like a duck and quacks like a duck,
    I call that bird a duck
(James Whitcomb Riley)
*/

interface Duck {
  walk: () => void;
  swim: () => void;
  quack: () => void;
}
// –ê–±–æ –º–µ—Ç–æ–¥–∏ –º–æ–∂–Ω–∞ –æ–ø–∏—Å—É–≤–∞—Ç–∏ —Ç–∞–∫-> walk(): void

let probablyADuck = {
  walk: () => console.log("walking like a duck"),
  swim: () => console.log("swimming like a duck"),
  quack: () => console.log("quacking like a duck"),
};

function FlyOverWater(bird: Duck) {}

FlyOverWater(probablyADuck); // OK

/* –°–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –º–∞—Å–∏–≤—ñ–≤ */
interface MyArrInterface {
  [index: number]: string;
}

let arrOfStrings: MyArrInterface = ["first", "second"];

//----  –∞–ª–µ –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –¥–ª—è —Ç–∞–∫–æ–≥–æ —Ç–∏–ø—É –≤–∏–∫–ª–∏–∫–∞—Ç–∏ map - –±—É–¥–µ –ø–æ–º–∏–ª–∫–∞

// arrOfStrings.map(); // ERROR  Property 'map' does not exist on type 'MyArrInterface'

//----  —Ç–∞–∫ –±—É–¥–µ  –Ω–æ—Ä–º–∞–ª—å–Ω–æ
let stringArr: string[] = ["first", "second"];
//üî∫‚ùóÔ∏è Uncomment
// stringArr.map((item) => console.log(item));

/* ========================= example ========  */
interface Address {
  province: string;
  region: string;
  postalCode: string;
  line1: string;
}

interface Contact {
  id: number;
  name: string;
  birthDay: Date;
}

const primaryContact: Contact = {
  id: 22,
  name: "Jim",
  birthDay: new Date("10-05-2020"),
};

/* =================== type aliases  */
type Employee = {
  id: number;
  name: string;
};
let employee: Employee = {
  id: 0,
  name: "Bill",
};

/* 
======================= üë©‚Äçüéì –ó–ê–í–î–ê–ù–ù–Ø –°–õ–£–•–ê–ß–ê–ú
10 => tasks/10_task.ts 
11 => tasks/11_task.ts 
12 => tasks/12_task.ts 
 */

/*  üì£ ======== 7. Literal types ======== */

/*  Literal type  */

// –¶–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–ø
let num: 1 | 2 | 3;
num = 3;

//@ts-expect-error - error
num = 44;

type AnimationType = {
  delay: number;
  type: string;
};

function animate(opts: AnimationType) {}

/*  üì£ ======== 8. Union Type ======== */
/*  https://en.wikipedia.org/wiki/Union_(set_theory)  */
/*  https://en.wikipedia.org/wiki/Intersection_(set_theory)  */
/*  ==================================  */

let text: string | null | undefined;
text = "this is text";
text = null;
text = undefined;

/* ==========   Example Union Type  ==========  */
type Admin = {
  id: string;
  role: string;
};
type User = {
  email: string;
};

const routeToAdminPage = (role: string) => {};
const routeToHomePage = (role: string) => {};

function redirect(user: Admin | User) {
  if (user as Admin) {
    routeToAdminPage(user.role);
  } else {
    routeToHomePage(user.email);
  }
}

/*  =================== Discriminated union  ==============  */
/*  ===== Example 1 */
function tryParseInt(text: string) {
  if (/^-?\d+$/.test(text)) {
    return {
      success: true,
      value: parseInt(text, 10),
    };
  }
  return {
    success: false,
    error: "Invalid number format",
  };
}

/* ============== Example 2 */
type Cash = {
  kind: "cash";
};
type PayPal = {
  kind: "paypal";
  email: string;
};
type CreditCard = {
  kind: "creditcard";
  cardNumber: string;
  securityCode: string;
};

/* ================ mutable  ==================== */

/* ======= Example 1 */
{
  type ButtonAttributes = {
    type: "button" | "submit" | "reset";
  };

  let type = "button";

  const buttonAttributes: ButtonAttributes = {
    type, // —á–æ–º—É —Ç—É—Ç –ø–æ–º–∏–ª–∫–∞ ?
  };
}
/* ============ example 2 */
{
  type ButtonAttributes = {
    type: "button" | "submit" | "reset";
  };

  // variant 1 - single button
  const modifyButton = (attributes: ButtonAttributes) => {};

  const buttonAttributes = {
    type: "button",
  };

  modifyButton(buttonAttributes);

  // variant 2 - array of buttons attributes
  const modifyButtons = (attributes: ButtonAttributes[]) => {};

  const buttonsToChange = [
    {
      type: "button",
    },
    {
      type: "submit",
    },
  ];

  modifyButtons(buttonsToChange);
}

/* ======================= üë©‚Äçüéì –ó–ê–í–î–ê–ù–ù–Ø –°–õ–£–•–ê–ß–ê–ú:
01 =>  tasks_1/01_task.ts  
02 =>  tasks_1/02_task.ts  
03 =>  tasks_1/03_task.ts  
04 =>  tasks_1/04_task.ts  
05 =>  tasks_1/05_task.ts  
*/

/*  üì£ ======== 11. void ======== */

/* ------------- callable type  */
interface TwoNumCalculation {
  (x: number, y: number): number;
}

type TwoNumCalc = (x: number, y: number) => number;

/* ------ usage  */
const sum: TwoNumCalc = (a, b) => a + b;
const subtract: TwoNumCalc = (a, b) => a - b;

/* ------------- void  */

function firstFn(callback: () => undefined) {
  setTimeout(callback, 2000);
}

function secondFn(callback: () => void) {
  setTimeout(callback, 3000);
}

const nums: number[] = [];

//üî∫‚ùóÔ∏è Uncomment
// firstFn(() => nums.push(4)); // üö® ERROR

//üî∫‚ùóÔ∏è Uncomment
// secondFn(() => nums.push(4)); // ‚úîÔ∏è OK
